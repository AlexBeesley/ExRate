trigger:
- main

resources:
- repo: self

variables:
  dockerRegistryServiceConnection: '5d05a2ef-c74a-47da-898a-9520334170cb'
  imageRepository: 'exrate'
  containerRegistry: 'exrate.azurecr.io'
  dockerfilePath: '$(Build.SourcesDirectory)/Dockerfile'
  tag: '$(Build.BuildId)'

  vmImage: 'ubuntu-latest'
  
  subscriptionId: '7c7724e4-7059-4a11-a3fc-131ccce5a62b'
  servicePrincipalId: 'e852e09e-4018-4a6e-a53a-a65d3e57feaf'
  servicePrincipalKey: 'ruW8Q~dXoASVIYIU5~mL7ILuOZVShUINtVsOKdsk'
  tenantId: '8f962d2b-fa24-43d2-be9c-887d97b9e926'
  webAppName: 'exrate'
  resourceGroupName: 'ExRate'

stages:
- stage: Test_Stage
  displayName: Test Stage
  jobs:
  - job: Test
    displayName: Test
    pool:
      vmImage: $(vmImage)
    steps:
    - task: DotNetCoreCLI@2
      displayName: Run .NET Tests
      inputs:
        command: 'test'
        projects: '**/*Tests.csproj'
- stage: Build_Docker_Image_Then_Deploy
  displayName: Build Docker Image Then Deploy
  jobs:
  - job: Docker_Build
    displayName: Docker build and push
    pool:
      vmImage: $(vmImage)
    steps:
    - task: Docker@2
      displayName: Docker Build and push image to container registry
      inputs:
        command: buildAndPush
        repository: $(imageRepository)
        dockerfile: $(dockerfilePath)
        containerRegistry: $(dockerRegistryServiceConnection)
        tags: |
          $(tag)
    - task: AzureWebAppContainer@1
      displayName: Deploy to Web App
      inputs:
        azureSubscription: $(subscriptionId)
        appName: $(webAppName)
        resourceGroupName: $(resourceGroupName)
        images: |
          $(containerRegistry)/$(imageRepository):$(tag)
        multiContainerConfigFile: |
          {
            "dockerComposeFileUrl": "",
            "dockerComposeFile": "",
            "orchestratorType": ""
          }
        containerRegistryType: 'Azure Container Registry'
        credentialsSource: 'ServicePrincipal'
        containerRegistry: $(dockerRegistryServiceConnection)
        azureContainerRegistry: $(containerRegistry)
        azureSubscriptionEndpoint: $(servicePrincipalId)
        azureResourceGroup: $(resourceGroupName)
        azureTenantId: $(tenantId)
        azureContainerRegistryPassword: $(servicePrincipalKey)
