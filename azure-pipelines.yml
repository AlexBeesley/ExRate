trigger:
- main

resources:
- repo: self

variables:
  dockerRegistryServiceConnection: '5d05a2ef-c74a-47da-898a-9520334170cb'
  imageRepository: 'exrate'
  containerRegistry: 'exrate.azurecr.io'
  dockerfilePath: '$(Build.SourcesDirectory)/Dockerfile'
  tag: '$(Build.BuildId)'

  vmImage: 'ubuntu-latest'
  
  webAppName: 'exrate'
  resourceGroupName: 'ExRate'

stages:
- stage: Test_Stage
  displayName: Test Stage
  jobs:
  - job: Test
    displayName: Test
    pool:
      vmImage: $(vmImage)
    steps:
    - task: DotNetCoreCLI@2
      displayName: Run .NET Tests
      inputs:
        command: 'test'
        projects: '**/*Tests.csproj'
- stage: Build_Docker_Image_Stage
  displayName: Docker build and push stage
  jobs:
  - job: Docker_Build
    displayName: Docker build and push
    pool:
      vmImage: $(vmImage)
    steps:
    - task: Docker@2
      displayName: Docker Build and push image to container registry
      inputs:
        command: buildAndPush
        repository: $(imageRepository)
        dockerfile: $(dockerfilePath)
        containerRegistry: $(dockerRegistryServiceConnection)
        tags: |
          $(tag)
- stage: Deploy_Docker_Image_To_App_Service
  displayName: Deploy App Service
  dependsOn: Build_Docker_Image_Stage
  jobs:
  - deployment: Deploy_App_Service
    displayName: Deploy Web App
    pool:
      vmImage: $(vmImage)
    environment: 'my-webapp-environment'
    strategy:
      runOnce:
        deploy:
          steps:
          - task: AzureWebAppContainer@1
            displayName: 'Deploy to Web App'
            inputs:
              azureSubscription: '7c7724e4-7059-4a11-a3fc-131ccce5a62b'
              appName: $(webAppName)
              resourceGroupName: $(resourceGroupName)
              images: |
                $(containerRegistry)/$(imageRepository):$(tag)
